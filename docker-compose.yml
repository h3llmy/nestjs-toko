services:
  api:
    container_name: api
    restart: always
    build: .
    ports:
      - '${PORT}:${PORT}'
    env_file:
      - .env
    volumes:
      - .:/usr/src/app
    depends_on:
      - postgres
      - redis
    networks:
      - internal_network

  seeder:
    container_name: seeder
    build:
      context: .
      dockerfile: ./Dockerfile.seeder
    env_file:
      - .env
    depends_on:
      - postgres
    networks:
      - internal_network

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    networks:
      - internal_network

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: >
      --requirepass ${REDIS_PASSWORD}
    networks:
      - internal_network

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api
    networks:
      - internal_network

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${S3_USER}
      MINIO_ROOT_PASSWORD: ${S3_PASSWORD}
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio_data:/data
      - minio_config:/root/.minio
    command: server /data --console-address ":9001"
    restart: unless-stopped

networks:
  internal_network:
    driver: bridge

volumes:
  postgres_data:
  minio_data:
  minio_config:
